apiVersion: template.openshift.io/v1
kind: Template
metadata:
  name: tomcat-server
  labels: 
    app: tomcat-server
message: TOMCAT SERVER JOB

parameters:
- name: APP_NS
  displayName: Application Namespace
  description: Nama aplikasi dan namespace
  value: tomcat-project
- name: APP_NAME
  displayName: Application Name
  description: Nama aplikasi dan namespace
  value: tomcat-server
  required: true
- name: APP_GIT_URL
  displayName: Application Source Git URL
  description: The Git URL of the application source code
  required: true
  value: https://github.com/taabich/httpd-openshift
- name: SECRET
  displayName: Webhook Secret
  description: Secret for webhooks
  value: tomcat


objects:
- kind: PersistentVolumeClaim
  apiVersion: v1
  metadata:
    name: tomcat-data
  spec:
    accessModes:
      - ReadWriteOnce
    resources:
      requests:
        storage: 512Mi

- kind: "LimitRange"
  apiVersion: "v1"
  metadata:
    name: "core-resource-limits" 
  spec:
    limits:
      - type: "Pod"
        max:
          cpu: "2" 
          memory: "1Gi" 
        min:
          cpu: "200m" 
          memory: "6Mi" 
      - type: "Container"
        max:
          cpu: "2" 
          memory: "1Gi" 
        min:
          cpu: "100m" 
          memory: "4Mi" 
        default:
          cpu: "300m" 
          memory: "200Mi" 
        defaultRequest:
          cpu: "200m" 
          memory: "100Mi" 
        maxLimitRequestRatio:
          cpu: "10" 

- kind: ResourceQuota
  apiVersion: v1
  metadata:
    name: compute-resources
  spec:
    hard:
      pods: "2" 
      requests.cpu: "1" 
      requests.memory: 1Gi 
      requests.ephemeral-storage: 2Gi 
      limits.cpu: "2" 
      limits.memory: 2Gi 
      limits.ephemeral-storage: 4Gi 

- kind: ImageStream
  apiVersion: image.openshift.io/v1
  metadata:
    annotations:
    labels:
      app: ${APP_NAME}
    name: ${APP_NAME}
  spec:
    lookupPolicy:
      local: false

- kind: "BuildConfig"
  apiVersion: build.openshift.io/v1
  metadata:
    name: ${APP_NAME}
    labels:
      app: ${APP_NAME}
  spec:
    failedBuildsHistoryLimit: 1
    successfulBuildsHistoryLimit: 1
    runPolicy: Serial
    output: 
      to:
        kind: "ImageStreamTag"
        name: "${APP_NAME}:latest"
    source: 
      type: Git
      contextDir: "tomcat9/"
      git:
        uri: "${APP_GIT_URL}"
    strategy:
      type: Docker
      dockerStrategy:
        dockerfilePath: Dockerfile
    triggers:
    - type: ConfigChange
    - imageChange: {}
      type: ImageChange
    
        
- kind: Deployment
  apiVersion: apps/v1
  metadata:
    name: ${APP_NAME}
    labels:
      app: ${APP_NAME}
  spec:
    replicas: 0
    selector:
      matchLabels:
        app: ${APP_NAME}  
    template: 
      metadata:
        labels:
          name: ${APP_NAME}
          app: ${APP_NAME}
      spec:
        strategy:
          rollingUpdate:
            maxSurge: 25%
            maxUnavailable: 25%
          type: RollingUpdate
        volumes:
        - name: tomcat-data-vol
          persistentVolumeClaim:
            claimName: tomcat-data

        containers:
        - env:
            - name: TOMCAT_USERNAME
            - name: TOMCAT_PASSWORD
          name: ${APP_NAME}
          namespace: ${APP_NS}
          image: ${APP_NS}/${APP_NAME}:latest
          ports:
              - containerPort: 8009
                protocol: TCP
              - containerPort: 8443
                protocol: TCP
          volumeMounts:
            - mountPath: "/app"
              name:  tomcat-data-vol

    triggers:
      - type: "ConfigChange" 
      - imageChangeParams:
          automatic: true
          containerNames:
            - ${APP_NAME}
          from:
            kind: "ImageStreamTag"
            name: ${APP_NAME}:latest
        type: ImageChange

- kind: Service
  apiVersion: v1
  metadata:
    annotations:
    name: ${APP_NAME}
    labels:
      app: ${APP_NAME}
  spec:
    ports:
    - name: 8080-tcp
      protocol: TCP
      port: 8080
      targetPort: 8080
    selector:
      app: ${APP_NAME}
    type: ClusterIP
    sessionAffinity: None
- kind: Route
  apiVersion: route.openshift.io/v1
  metadata:
    name: ${APP_NAME}
    labels:
      app: ${APP_NAME}
    annotations:
  spec:
    to:
      kind: Service
      name: ${APP_NAME}
      weight: 100
    port:
      targetPort: 8080-tcp
  wildcardPolicy: None

